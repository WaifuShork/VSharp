module Spec;

NewLine: \u000D # carriage return  
       | \u000A # line feed
       | {\u000D \u000A} # carriage return followed by line feed
       | \u0085 # next line
       | \u2028 # line separator
       | \u2029; # paragraph separator

Letter: {'a'-'z' | 'A'-'Z'};

IdentifierStart: '_' | Letter;
IdentifierPart: IdentifierStart | Digit;

Identifier: IdentifierStart {1> IdentifierPart <*};

Digit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
DigitSequence: {0> Digit <*};

FloatingLiteral: {FractionalConstant [ExponentPart] [FloatingSuffix]} | {DigitSequence ExponentPart [FloatingSuffix]};

FractionalConstant: {[DigitSequence] '.' DigitSequence} | {DigitSequence '.'};
FloatingSuffix: "f32" | "f64";

Sign: '+' | '-';
ExponentPart: {'e' [Sign] DigitSequence } | {'E' [Sign] DigitSequence};

IntegerLiteral: DigitSequence [IntegerSuffix] ;
IntegerSuffix: "i8" | "ui8" | "i16" | "ui16" | "i32" | "ui32" | "i64" | "ui64";

AccessModifier: "private" | "public";
MutabilityModifier: "immutable" | "mutable";

# [public, static, immutable]
# [public, static, mutable]
# [public, immutable]
# [public, mutable]
# [public, static, ctor]
# [public, ctor]
Modifiers: '[' AccessModifier {[',' ["static"] ',' [MutabilityModifier]]} | {AccessModifier {[',' ["static"] ','] "ctor"}} ']'; 

Keyword: "typeof" 
       | "nameof" 
       | "sizeof" 
       | "new"
       | "var"
       | "const"
       | "public"
       | "private"
       | "class"
       | "struct"
       | "enum"
       | "static"
       | "immutable"
       | "mutable"
       | "this"
       | "value"
       | "nil"
       | "true"
       | "false"
       | "object"
       | "string"
       | "char"
       | "bool"
       | "int8"
       | "uint8"
       | "int16"
       | "uint16"
       | "int32"
       | "uint32"
       | "int64"
       | "uint64"
       | "float32"
       | "float64"
       | "use"
       | "from"
       | "module"
       | "generic"
       | "contract"
       | "when"
       | "ctor";

ModuleDefinition: Modifiers "module" Identifier '{' BlockDeclaration '}';
ClassDefinition: Modifiers "class" Identifier BlockDeclaration;
StructDefinition: Modifiers "struct" Identifier BlockDeclaration;
EnumDefinition: Modifiers "enum" Identifier EnumBlockDeclaration;
FunctionDefinition: [GenericDeclaration] Modifiers Identifier '(';
GlobalVariableDefinition: Modifiers Identifier Identifier ['=' Expression] ';';

BlockDeclaration: '{' {Member<*} '}';

Member: FunctionDeclaration | ClassDeclaration | StructDeclaration | ConstructorDeclaration | EnumDeclaration;

ConstructoDeclaration: Modifiers '(' Parameters ')' MethodBlockDeclaration;
Parameters: {Identifier Identifier [{0> ',' Identifier Identifier <*}]};
MethodBlockDeclaration: '{' Statements '}';
EnumBlockDeclaration: '{' Fields '}';

ConceptDeclaration: '@' "contract" '<' Identifier '>' [Modifiers] [Identifier] '{' ContractBlock '}';
GenericDeclaration: '@' "generic" '<' Identifier '>' ["when" ':' {Constraint [{0> ',' Constraint<*}]}];
Constraint: MethodConstraint | ConstructorConstraint | ContractDeclaration;
MethodConstraint: Identifier Identifier '(' [ConstraintParameters] ')';
ConstructorConstraint: "ctor" '(' [ConstraintParameters] ')';
ConstraintParameters: {Identifier {0> ',' Identifier <*}};

Statements: {0> Statement <*};
Statement: VariableDeclaration | FunctionCall | 
